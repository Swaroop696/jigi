registration : import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, Alert, ImageBackground } from 'react-native';

const Registration = ({ navigation }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const handleRegister = async () => {
    if (!username.trim() || !password.trim() || !confirmPassword.trim()) {
      Alert.alert('Error', 'Please fill in all fields.');
      return;
    }

    if (password !== confirmPassword) {
      Alert.alert('Error', 'Passwords do not match.');
      return;
    }

    try {
      const response = await fetch('https://99fe-103-186-41-202.ngrok-free.app/createnewuser/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username,
          password,
        }),
      });

      if (!response.ok) {
        throw new Error('Registration failed.');
      }

      const data = await response.json();
      // Handle successful registration response
      console.log('Registration successful:', data);
      Alert.alert('Success', 'Registration successful!');
      navigation.navigate('Login'); // Navigate to Login screen
    } catch (error) {
      console.error('Error registering:', error);
      const errorMessage = error.message || 'Failed to register. Please try again later.';
      Alert.alert('Error', errorMessage);
    }
  };

  return (
    <ImageBackground
      source={{ uri: 'https://redpithemes.com/Documentation/assets/img/page_bg/page_bg_blur02.jpg' }}
      style={styles.background}
    >
      <View style={styles.container}>
        <Text style={styles.title}>Register</Text>
        <TextInput
          style={styles.input}
          placeholder="Username"
          onChangeText={setUsername}
          value={username}
        />
        <TextInput
          style={styles.input}
          placeholder="Password"
          onChangeText={setPassword}
          value={password}
          secureTextEntry
        />
        <TextInput
          style={styles.input}
          placeholder="Confirm Password"
          onChangeText={setConfirmPassword}
          value={confirmPassword}
          secureTextEntry
        />
        <Button title="Register" onPress={handleRegister} />
      </View>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  background: {
    flex: 1,
    resizeMode: 'cover',
    justifyContent: 'center',
    alignItems: 'center',
  },
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
    color: '#333',
    fontWeight: 'bold',
  },
  input: {
    width: '80%',
    height: 40,
    borderColor: '#ccc',
    borderWidth: 1,
    marginBottom: 20,
    paddingHorizontal: 10,
    borderRadius: 5,
  },
});

export default Registration;



login:    
import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, ImageBackground, Alert } from 'react-native';

const Login = ({ navigation }) => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
    if (!username.trim() || !password.trim()) {
      Alert.alert('Error', 'Please enter your username and password.');
      return;
    }

    try {
      const response = await fetch('https://949a-103-186-41-202.ngrok-free.app/userlogin/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          username,
          password,
        }),
      });

      const data = await response.json();

      if (data && response.ok) {
        // Login successful (backend returns a boolean value indicating success)
        console.log('Login successful:', data);
        navigation.navigate('HomeScreen'); // Navigate to HomeScreen after successful login
      } else {
        // Login failed (backend returns a boolean value indicating failure)
        console.error('Login failed:', data);
        Alert.alert('Error', 'Incorrect username or password.');
      }
    } catch (error) {
      console.error('Error logging in:', error);
      Alert.alert('Error', 'Failed to log in. Please try again later.');
    }
  };

  const handleRegister = () => {
    navigation.navigate('Registration');
  };

  return (
    <ImageBackground
      source={{ uri: 'https://redpithemes.com/Documentation/assets/img/page_bg/page_bg_blur02.jpg' }}
      style={styles.background}
    >
      <View style={styles.container}>
        <Text style={styles.title}>Login</Text>
        <TextInput
          style={styles.input}
          placeholder="Username"
          onChangeText={setUsername}
          value={username}
        />
        <TextInput
          style={styles.input}
          placeholder="Password"
          onChangeText={setPassword}
          value={password}
          secureTextEntry
        />
        <TouchableOpacity style={styles.loginButton} onPress={handleLogin}>
          <Text style={styles.buttonText}>Login</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.registerButton} onPress={handleRegister}>
          <Text style={styles.buttonText}>Register</Text>
        </TouchableOpacity>
      </View>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  background: {
    flex: 1,
    resizeMode: 'cover',
    justifyContent: 'center',
  },
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
    color: 'black',
  },
  input: {
    width: '80%',
    height: 40,
    borderColor: 'white',
    borderWidth: 1,
    marginBottom: 20,
    paddingHorizontal: 10,
    color: 'black',
  },
  loginButton: {
    backgroundColor: '#007bff',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
    marginBottom: 10,
  },
  registerButton: {
    backgroundColor: '#28a745',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 5,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default Login;



chatbot: 

import React, { useEffect, useState } from 'react';
import { View, Text, TextInput, Button, FlatList, Image, StyleSheet, ActivityIndicator, Alert } from 'react-native';
import { IconButton } from 'react-native-paper';
import * as ImagePicker from 'expo-image-picker';
import * as Speech from 'expo-speech';
import { MaterialIcons } from '@expo/vector-icons';

// Function to fetch chat history based on username from the backend API
const fetchChatHistory = async (username) => {
  try {
    const response = await fetch('https://a04c-103-186-41-202.ngrok-free.app/fetchchathistory/', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ username }),
    });
    if (!response.ok) {
      // Handle the case where the chat history is not found for the user
      console.log('Chat history not found for user:', username);
      // You can return an empty array or handle this case based on your application logic
      return [];
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching chat history:', error);
    throw error;
  }
};


const ChatBotScreen = ({ route }) => {
  const { username } = route.params; // Get the username from route params
  const [chatHistory, setChatHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [prompt, setPrompt] = useState('');
  const [selectedImage, setSelectedImage] = useState(null);
  const [response, setResponse] = useState('');
  const [speaking, setSpeaking] = useState(false);

  useEffect(() => {
    // Fetch chat history based on the username when the component mounts
    const fetchUserChatHistory = async () => {
      setLoading(true);
      try {
        const history = await fetchChatHistory(username);
        setChatHistory(history);
      } catch (error) {
        console.error('Error fetching chat history:', error);
        Alert.alert('Error', 'Failed to fetch chat history. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchUserChatHistory();
  }, [username]); // Re-fetch chat history when the username changes

  // Function to handle text input change
  const handlePromptChange = (text) => {
    setPrompt(text);
  };

  // Function to handle image picker
  const handleImagePicker = async () => {
    try {
      const result = await ImagePicker.launchImageLibraryAsync({
        mediaTypes: ImagePicker.MediaTypeOptions.Images,
        quality: 1,
      });

      if (!result.cancelled && result.assets.length > 0 && result.assets[0].uri) {
        setSelectedImage(result.assets[0].uri);
      }
    } catch (error) {
      console.error('Error picking image:', error);
      Alert.alert('Error', 'Failed to pick image. Please try again later.');
    }
  };

  // Function to handle generating response
  const handleGenerateResponse = async () => {
    setLoading(true);
    try {
      // Your logic for generating response goes here
      // Update chat history, set response, etc.
    } catch (error) {
      console.error('Error generating response:', error);
      Alert.alert('Error', 'Failed to generate response. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  // Function to speak response
  const speakResponse = async (text) => {
    try {
      await Speech.speak(text, { language: 'en', pitch: 1, onDone: () => setSpeaking(false) });
    } catch (error) {
      console.error('Error speaking text:', error);
      Alert.alert('Error', 'Failed to speak text.');
    }
  };

  // Function to toggle speaking
  const toggleSpeak = () => {
    if (speaking) {
      Speech.stop();
    } else {
      speakResponse(response);
    }
    setSpeaking(!speaking);
  };

  // Function to render chat item
  const renderChatItem = ({ item }) => (
    <View style={styles.chatItem}>
      <Text style={styles.userText}>You: {item.prompt}</Text>
      {item.image && (
        <View style={styles.imageContainer}>
          <Image source={{ uri: item.image }} style={styles.chatImage} />
          <Text style={styles.aristotleText}>ARISTOTLE: {item.response}</Text>
        </View>
      )}
      {!item.image && (
        <Text style={styles.aristotleText}>ARISTOTLE: {item.response}</Text>
      )}
    </View>
  );

  return (
    <View style={styles.container}>
      <FlatList
        data={chatHistory}
        renderItem={renderChatItem}
        keyExtractor={(item, index) => index.toString()}
        style={styles.chatList}
        contentContainerStyle={{ flexGrow: 1 }}
        inverted // Start from the bottom
      />
      <View style={styles.inputContainer}>
        {selectedImage && (
          <Image source={{ uri: selectedImage }} style={styles.selectedImage} />
        )}
        <TextInput
          placeholder="Type your message here..."
          placeholderTextColor={'white'}
          style={styles.input}
          onChangeText={handlePromptChange}
          value={prompt}
        />
        <Button
          title="Send"
          onPress={handleGenerateResponse}
          disabled={!prompt || loading}
        />
        <Button
          title={speaking ? "Stop" : 'Speak'}
          onPress={toggleSpeak}
        />
        <IconButton
          icon={() => <MaterialIcons name="attach-file" size={24} color="white" />}
          onPress={handleImagePicker}
          style={{ backgroundColor: 'rgba(0, 0, 0, 0.5)' }}
        />
      </View>
      {loading && <ActivityIndicator style={styles.loader} size="large" color="#007bff" />}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 10,
    borderTopWidth: 1,
    borderColor: 'white',
  },
  input: {
    flex: 1,
    borderWidth: 1,
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
    color: 'white',
    borderColor: 'white',
  },
  loader: {
    alignSelf: 'center',
    marginTop: 20,
  },
  chatList: {
    flex: 1,
    paddingHorizontal: 10,
    paddingVertical: 20,
  },
  chatItem: {
    marginBottom: 10,
    borderWidth: 1,
    borderColor: 'white',
    borderRadius: 5,
    padding: 10,
  },
  userText: {
    color: 'white',
    marginBottom: 5,
  },
  aristotleText: {
    color: 'white',
    marginBottom: 5,
    fontStyle: 'italic',
  },
  imageContainer: {
    marginBottom: 10,
    alignItems: 'center',
  },
  chatImage: {
    width: 200,
    height: 200,
    borderRadius: 5,
    marginBottom: 5,
  },
  selectedImage: {
    width: 50,
    height: 50,
    borderRadius: 5,
    marginBottom: 10,
  },
});

export default ChatBotScreen;
